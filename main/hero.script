local speed = 150

function init(self)
	msg.post(".", "acquire_input_focus")
	self.dir = vmath.vector3()
	self.current_anim = nil
	self.velocity = vmath.vector3()
end

function update(self, dt)
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	local p = go.get_position()
	go.set_position(p + self.dir * speed * dt)

	-- animate the astronaut

	local anim = hash("idle")

	if self.dir.x > 0 then
		anim = hash("right")
	elseif self.dir.x < 0 then
		anim = hash("left")
	elseif self.dir.y > 0 then
		anim = hash("back")
	elseif self.dir.y < 0 then
		anim = hash("front")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end

	-- done animating

	self.dir = vmath.vector3()
	self.correction = vmath.vector3()
end

function on_input(self, action_id, action)
	if action_id == hash("front") then
		self.dir.y = -1
	elseif action_id == hash("back") then
		self.dir.y = 1
	elseif action_id == hash("left") then
		self.dir.x = -1
	elseif action_id == hash("right") then
		self.dir.x = 1
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then  -- <4>
		-- print(message)
		-- print(message.distance)
		local proj = vmath.dot(self.dir, message.normal)
		local comp = (message.distance - proj) * message.normal
		self.dir = self.dir + comp
		go.set_position(go.get_position(id) + comp)
		proj = vmath.dot(self.dir, message.normal)
		if proj < 0 then
			self.dir = self.dir - proj * message.normal
		end
	end
	-- Handle collision
	-- if message_id == hash("trigger_response") then
	-- 	print(message.distance)
	-- 	local proj = vmath.dot(self.dir, message.normal)
	-- 	local comp = (message.distance - proj) * message.normal
	-- 	self.dir = self.dir + comp
	-- 	go.set_position(go.get_position(id) + comp)
	-- 	proj = vmath.dot(self.velocity, message.normal)
	-- 	if proj < 0 then
	-- 		self.velocity = self.velocity - proj * message.normal
	-- 	end
	-- end
end